.row  {
    max-width: $grid-width;
    margin: 0 auto;

    &:not(:last-child) {
        margin-bottom: 1rem;  // Door margin-bottom hierin te zetten, pas je deze regel toe op alle elementen BEHALVE last-child, vandaar not(uitzondering).

        @include respond(tab-port) {
            margin-bottom: $gutter-vertical-small;
        }
    }

    @include respond(tab-port) {
        max-width: 50rem;
        padding: 0 3rem;
    }

    @include clearfix;

    [class^="col"] { // <-- dit geval, de attribute selector, selecteert alle classen die beginnen^ met 'col'. Eindigen$ kan ook, of *bevatten

        &:not(:last-child) {
            margin-right: 0;

            @include respond(tab-port) {
                margin-right: 0;  // bij kleine schermen wordt de gutter nu genegeerd
                margin-bottom: $gutter-vertical-small;
            }
        }

        @include respond(tab-port) {
            width: 100% !important;     // zodat je op 'staande' tablets en telefoons maar 1 kolom tegelijk ziet
        }
    }

    .col1of2 {
        width: calc((100% - #{$gutter-horizontal}) / 2);
        // binnen calc heb je dus #{scss variabele} nodig om berekeningen uit te voeren. Verder kun je wel alle units door elkaar gebruiken
    }

    .col1of3 {
        width: calc(98% / 3);
        display: inline-block;
        position: relative;
    }

    // .col2of3 {
    //     width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
    // }

    .col1of4 {
        width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
    }

    // .col2of4 {
    //     width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
    // }

    // .col3of4 {
    //     width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
    // }
}